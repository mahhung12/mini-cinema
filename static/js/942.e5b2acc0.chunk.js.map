{"version":3,"file":"static/js/942.e5b2acc0.chunk.js","mappings":"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","sources":["api/moviesApi.js","pages/home/components/Lists/lists.js"],"sourcesContent":["// import axios from \"./axios\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = \"25d5a81cb8b0abcf8248cb23190f5691\";\r\nconst url = \"https://api.themoviedb.org/3\";\r\nconst NOW_PLAYING_URL = `${url}/movie/now_playing`;\r\nconst TOP_RATED_URL = `${url}/movie/top_rated`;\r\nconst MOVIE_URL = `${url}/movie`;\r\nconst MOVIES_URL = `${url}/discover/movie`;\r\nconst GENRE_URL = `${url}/genre/movie/list`;\r\nconst PERSON_URL = `${url}/trending/person/week`;\r\n\r\n// api/movie.js\r\nexport const fetchMovies = async () => {\r\n    try {\r\n        const params = {\r\n            api_key: API_KEY,\r\n            language: \"en_US\",\r\n            page: 1,\r\n        };\r\n        const { data } = await axios.get(NOW_PLAYING_URL, {\r\n            params,\r\n        });\r\n\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\";\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"],\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchGenre = async () => {\r\n    try {\r\n        const { data } = await axios.get(GENRE_URL, {\r\n            params: {\r\n                api_key: API_KEY,\r\n                language: \"en_US\",\r\n                page: 1,\r\n            },\r\n        });\r\n        const modifiedData = data[\"genres\"].map((g) => ({\r\n            id: g[\"id\"],\r\n            name: g[\"name\"],\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchMovieByGenre = async (genre_id) => {\r\n    try {\r\n        const { data } = await axios.get(MOVIES_URL, {\r\n            params: {\r\n                api_key: API_KEY,\r\n                language: \"en_US\",\r\n                page: 1,\r\n                with_genres: genre_id,\r\n            },\r\n        });\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\";\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"],\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchPersons = async () => {\r\n    try {\r\n        const { data } = await axios.get(PERSON_URL, {\r\n            params: {\r\n                api_key: API_KEY,\r\n            },\r\n        });\r\n        const modifiedData = data[\"results\"].map((p) => ({\r\n            id: p[\"id\"],\r\n            popularity: p[\"popularity\"],\r\n            name: p[\"name\"],\r\n            profileImg:\r\n                \"https://image.tmdb.org/t/p/w200\" +\r\n                p[\"profile_path\"],\r\n            known: p[\"known_for_department\"],\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchTopratedMovie = async () => {\r\n    try {\r\n        const { data } = await axios.get(TOP_RATED_URL, {\r\n            params: {\r\n                api_key: API_KEY,\r\n                language: \"en_US\",\r\n                page: 1,\r\n            },\r\n        });\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\";\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"],\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchMovieDetail = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${MOVIE_URL}/${id}`, {\r\n            params: {\r\n                api_key: API_KEY,\r\n                language: \"en_US\",\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchVideoMovie = async (id) => {\r\n    try {\r\n        const params = {\r\n            api_key: API_KEY,\r\n        };\r\n        const { data } = await axios.get(\r\n            `${MOVIE_URL}/${id}/videos`,\r\n            { params }\r\n        );\r\n\r\n        return data;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchMovieVideos = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(\r\n            `${MOVIE_URL}/${id}/videos`,\r\n            {\r\n                params: {\r\n                    api_key: API_KEY,\r\n                },\r\n            }\r\n        );\r\n        return data[\"results\"][0];\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchCasts = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(\r\n            `${MOVIE_URL}/${id}/credits`,\r\n            {\r\n                params: {\r\n                    api_key: API_KEY,\r\n                },\r\n            }\r\n        );\r\n        const modifiedData = data[\"cast\"].map((c) => ({\r\n            id: c[\"cast_id\"],\r\n            character: c[\"character\"],\r\n            name: c[\"name\"],\r\n            img:\r\n                \"https://image.tmdb.org/t/p/w200\" +\r\n                c[\"profile_path\"],\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchSimilarMovie = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(\r\n            `${MOVIE_URL}/${id}/similar`,\r\n            {\r\n                params: {\r\n                    api_key: API_KEY,\r\n                    language: \"en_US\",\r\n                },\r\n            }\r\n        );\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\";\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"],\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n","import {\r\n    fetchGenre,\r\n    fetchMovieByGenre,\r\n    fetchMovies,\r\n    fetchPersons,\r\n    fetchTopratedMovie,\r\n    fetchMovieDetail,\r\n    fetchMovieVideos,\r\n} from \"api/moviesApi\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport ReactPlayer from \"react-player\";\r\nimport Slider from \"react-slick\";\r\nimport \"./lists.scss\";\r\n\r\nconst settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToScroll: 3,\r\n    slidesToShow: 6,\r\n};\r\n\r\nfunction Lists() {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [getIdMovie, setGetIdMovie] = useState(802);\r\n    const [detail, setDetail] = useState([]);\r\n    const [nowPlaying, setNowPlaying] = useState([]);\r\n    const [genres, setGenres] = useState([]);\r\n    const [movieByGenre, setMovieByGenre] = useState([]);\r\n    const [persons, setPersons] = useState([]);\r\n    const [topRated, setTopRated] = useState([]);\r\n    const [activeGenres, setActiveGenres] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setNowPlaying(await fetchMovies());\r\n            setGenres(await fetchGenre());\r\n            setMovieByGenre(await fetchMovieByGenre());\r\n            setPersons(await fetchPersons());\r\n            setTopRated(await fetchTopratedMovie());\r\n        };\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDetail(await fetchMovieVideos(getIdMovie));\r\n        };\r\n\r\n        fetchAPI();\r\n    }, [getIdMovie]);\r\n\r\n    const onWatchClick = (id) => {\r\n        setGetIdMovie(id);\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const onSelectMovieByGenres = async (id) => {\r\n        setMovieByGenre(await fetchMovieByGenre(id));\r\n        setActiveGenres(id);\r\n        console.log(activeGenres);\r\n    };\r\n\r\n    // console.log(detail);\r\n\r\n    const MoviePalyerModal = (props) => {\r\n        const youtubeUrl = \"https://www.youtube.com/watch?v=\";\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title\r\n                        id=\"contained-modal-title-vcenter\"\r\n                        style={{\r\n                            color: \"#000000\",\r\n                            fontWeight: \"bolder\",\r\n                        }}\r\n                    >\r\n                        Trailer\r\n                        {detail.title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body\r\n                    style={{ backgroundColor: \"#000000\" }}\r\n                >\r\n                    <ReactPlayer\r\n                        className=\"container-fluid\"\r\n                        url={youtubeUrl + detail.key}\r\n                        playing\r\n                        width=\"100%\"\r\n                    ></ReactPlayer>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    };\r\n\r\n    const GenresMovie = ({ genres }) => {\r\n        return (\r\n            <div className=\"lists-movie__title\">\r\n                {genres.map((genres) => {\r\n                    return (\r\n                        <h1\r\n                            key={genres.id}\r\n                            className={`title__text ${\r\n                                genres.id === activeGenres\r\n                                    ? \"activeGenres\"\r\n                                    : \"\"\r\n                            }`}\r\n                            onClick={() =>\r\n                                onSelectMovieByGenres(genres.id)\r\n                            }\r\n                        >\r\n                            {genres.name}\r\n                        </h1>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const MovieListsComponents = ({\r\n        getMovieByGenre,\r\n        title,\r\n    }) => {\r\n        return (\r\n            <div className=\"lists-movie__lists\">\r\n                <div className=\"title\">{title}</div>\r\n                <div className=\"lists\">\r\n                    <Slider {...settings}>\r\n                        {getMovieByGenre.map((movie) => {\r\n                            return (\r\n                                <div\r\n                                    key={movie.id}\r\n                                    className=\"item\"\r\n                                >\r\n                                    <div className=\"item__banner\">\r\n                                        <img\r\n                                            src={movie.poster}\r\n                                            alt={movie.title}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"item__movie-information\">\r\n                                        <div className=\"btn-func\">\r\n                                            <button\r\n                                                onClick={() =>\r\n                                                    onWatchClick(\r\n                                                        movie.id\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                (Watch)\r\n                                            </button>\r\n                                            <button>\r\n                                                (Add)\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"infor\">\r\n                                            <div className=\"infor-top\">\r\n                                                <h1>\r\n                                                    {movie.title}\r\n                                                </h1>\r\n                                                <span>\r\n                                                    {\r\n                                                        movie.rating\r\n                                                    }\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className=\"infor-bottom\">\r\n                                                {movie.overview}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Slider>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"lists-movie\">\r\n            <GenresMovie genres={genres} />\r\n\r\n            <MovieListsComponents\r\n                getMovieByGenre={movieByGenre}\r\n                title=\"Trending Movies\"\r\n            />\r\n            <MovieListsComponents\r\n                getMovieByGenre={topRated}\r\n                title=\"Top Rated\"\r\n            />\r\n\r\n            <MoviePalyerModal\r\n                show={isOpen}\r\n                onHide={() => {\r\n                    setIsOpen(false);\r\n                }}\r\n            ></MoviePalyerModal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lists;\r\n"],"names":["API_KEY","url","NOW_PLAYING_URL","TOP_RATED_URL","MOVIE_URL","MOVIES_URL","GENRE_URL","PERSON_URL","fetchMovies","params","api_key","language","page","axios","data","posterUrl","modifiedData","map","m","id","backPoster","popularity","title","poster","overview","rating","fetchGenre","g","name","fetchMovieByGenre","genre_id","with_genres","fetchPersons","p","profileImg","known","fetchTopratedMovie","fetchMovieVideos","settings","dots","infinite","speed","slidesToScroll","slidesToShow","useState","isOpen","setIsOpen","getIdMovie","setGetIdMovie","detail","setDetail","setNowPlaying","genres","setGenres","movieByGenre","setMovieByGenre","setPersons","topRated","setTopRated","activeGenres","setActiveGenres","useEffect","fetchAPI","onSelectMovieByGenres","console","log","MoviePalyerModal","props","Modal","size","centered","closeButton","style","color","fontWeight","backgroundColor","className","key","playing","width","GenresMovie","onClick","MovieListsComponents","getMovieByGenre","movie","src","alt","show","onHide"],"sourceRoot":""}